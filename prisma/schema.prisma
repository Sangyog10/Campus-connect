generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String
  phone    String
  role     String   @default("teacher")
  section  Section?

  attendances   Attendance[]
  internalMarks InternalMarks[]
  notes         Notes[]
  notices       Notice[]
  subjects      Subject[]       @relation("TeacherSubjects")
  Subject       Subject[]
}

model Student {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  phone    String
  semester String
  section  Section
  faculty  Faculty
  role     String  @default("student")

  attendances   Attendance[]
  internalMarks InternalMarks[]
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String
  faculty     Faculty
  semester    String
  subjectCode String   @unique
  section     Section?

  attendances   Attendance[]
  internalMarks InternalMarks[]
  notes         Notes[]
  notices       Notice[]
  teachers      Teacher[]       @relation("TeacherSubjects")
  Teacher       Teacher?        @relation(fields: [teacherId], references: [id])
  teacherId     Int?
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean
  section Section?

  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  studentId Int
  student   Student @relation(fields: [studentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teacherId, subjectId, studentId])
}

model InternalMarks {
  id      Int      @id @default(autoincrement())
  marks   Float
  section Section?

  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  studentId Int
  student   Student @relation(fields: [studentId], references: [id])
}

model Notes {
  id       Int     @id @default(autoincrement())
  title    String
  file     String
  semester String
  section  Section

  faculty   Faculty
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])
}

model Notice {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  semester    String
  section     Section

  faculty   Faculty
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])
}

enum Faculty {
  COMPUTER
  CIVIL
  MECHANICAL
  ELECTRICAL
  AGRICULTURE
  ELECTRONICS
  ARCHITECTURE
}

enum Section {
  AB
  CD
  EF
}
